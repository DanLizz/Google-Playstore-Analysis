# -*- coding: utf-8 -*-
"""Google Play Store App Analytics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1taJSwFop4Pz35YG7UDxNn7tTSDOW8S8b

# Introduction

In this notebook, we will do a comprehensive analysis of the Android app market by comparing thousands of apps in the Google Play store.

<img src= "https://www.lifewire.com/thmb/dfHK-gfy8YrQi4geqfBdzav59pY=/2542x1430/smart/filters:no_upscale()/ScreenShot2019-02-11at10.04.23AM-5c61c76946e0fb000184a26b.jpg">

# About the Dataset of Google Play Store Apps & Reviews

**Data Source:** <br>
App and review data was scraped from the Google Play Store by Lavanya Gupta in 2018. Original files listed [here](
https://www.kaggle.com/lava18/google-play-store-apps).

# Import Statements
"""

import pandas as pd
import plotly.express as px
pd.options.mode.chained_assignment = None  # default='warn'

"""# Notebook Presentation"""

# Show numeric output in decimal format e.g., 2.15
pd.options.display.float_format = '{:,.2f}'.format

"""# Read the Dataset"""

df_apps = pd.read_csv('apps.csv')

"""# Data Cleaning

How many rows and columns does `df_apps` have? What are the column names? Look at a random sample of 5 different rows with [.sample()](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.sample.html).
"""

df_apps.shape

df_apps.columns

df_apps.sample(5)

"""### Drop Unused Columns

Removing the columns called `Last_Updated` and `Android_Version` from the DataFrame since We will not use these columns. 
"""

# del df_apps['Last_Updated']
# del df_apps['Android_Ver']
df_apps.sample(5)

"""### Find and Remove NaN values in Ratings

Let's see how may rows have a NaN value (not-a-number) in the Ratings column? And we can create a  DataFrame called `df_apps_clean` that does not include these rows. 
"""

no_value_games = df_apps.isna().values.sum()

print(no_value_games)

df_apps_clean = df_apps.dropna()
df_apps_clean.shape

"""### Find and Remove Duplicates

Are there any duplicates in data?  How many entries can you find for the "Instagram" app?

"""

# df_apps_clean = df_apps_clean.to_frame()
duplicated_rows = df_apps_clean[df_apps_clean.duplicated()]
print(duplicated_rows.shape)

duplicated_rows.head()

df_apps_clean[df_apps_clean.App == 'Instagram']

df_apps_clean = df_apps_clean.drop_duplicates(subset=['App', 'Type', 'Price'])
df_apps_clean[df_apps_clean.App == 'Instagram']

df_apps_clean.shape

"""# Find Highest Rated Apps

Let's find out which apps are the highest rated.
"""

df_apps_clean['Rating'].idxmax()

df_apps_clean['Rating'].max()

df_apps_clean['App'].loc[21]

df_apps_clean.sort_values('Rating', ascending=False).head()

"""What problem might you encounter if you rely exclusively on ratings alone to determine the quality of an app?

Because, some apps with less number of reviews might be having highest rating which is not accurate to find if the app is good or not.

# Find 5 Largest Apps in terms of Size (MBs)

Let's analyze the size in megabytes (MB) of the largest Android apps in the Google Play Store.
"""

df_apps_clean.sort_values('Size_MBs', ascending=False).head()

"""Based on the data,we can see that there could be limit in place as the largest Size_MBs is 100

# Find the 5 App with Most Reviews

Which apps have the highest number of reviews? Are there any paid apps among the top 50?
"""

df_apps_clean.sort_values('Reviews', ascending=False).head(50)

"""# Plotly Pie and Donut Charts - Visualise Categorical Data: Content Ratings"""

ratings = df_apps_clean.Content_Rating.value_counts()

ratings

fig = px.pie(labels=ratings.index,
             values=ratings.values,
             title="Content Rating",
             names=ratings.index)
fig.show()

fig.update_traces(textposition='outside', textinfo='percent+label')

fig = px.pie(labels=ratings.index,
values=ratings.values,
title="Content Rating",
names=ratings.index,
hole=0.6,
)
fig.update_traces(textposition='inside', textfont_size=15, textinfo='percent')
 
fig.show()

"""# Numeric Type Conversion: Examine the Number of Installs

How many apps had over 1 billion (that's right - BILLION) installations? How many apps just had a single install? 

"""

df_apps_clean.Installs.describe()

df_apps_clean.info()

df_apps_clean.Installs = df_apps_clean.Installs.astype(str).str.replace(',', "")
df_apps_clean.Installs = pd.to_numeric(df_apps_clean.Installs)

df_apps_clean[['App', 'Installs']].groupby('Installs').count()

"""# Find the Most Expensive Apps, Filter out the Junk, and Calculate a (ballpark) Sales Revenue Estimate

Let's examine the Price column more closely.

Remove all apps that cost more than $250 from the `df_apps_clean` DataFrame.

Let's add a column called 'Revenue_Estimate' to the DataFrame. This column should hold the price of the app times the number of installs. What are the top 10 highest grossing paid apps according to this estimate? Out of the top 10 highest grossing paid apps, how many are games?

"""

df_apps_clean.Price.describe

df_apps_clean.Price = df_apps_clean.Price.astype(str).str.replace('$', "")
df_apps_clean.Price = pd.to_numeric(df_apps_clean.Price)

df_apps_clean.sort_values('Price', ascending=False).head(20)

"""### The most expensive apps sub $250"""

df_apps_clean = df_apps_clean[df_apps_clean['Price'] < 250]
df_apps_clean.sort_values('Price', ascending=False).head(5)

"""### Highest Grossing Paid Apps (ballpark estimate)"""

df_apps_clean.Installs.astype(str).str.replace(',', "")
df_apps_clean.Installs = pd.to_numeric(df_apps_clean.Installs)

df_apps_clean['Revenue_Estimate'] = df_apps_clean.Installs.mul(df_apps_clean.Price)
df_apps_clean.sort_values('Revenue_Estimate', ascending=False)[:10]

"""# Plotly Bar Charts & Scatter Plots: Analysing App Categories"""

top10_category = df_apps_clean.Category.value_counts()[:10]
top10_category

bar = px.bar(x = top10_category.index,
             y = top10_category.values)

"""### Vertical Bar Chart - Highest Competition (Number of Apps)"""

bar.show()

"""### Horizontal Bar Chart - Most Popular Categories (Highest Downloads)"""

category_installs = df_apps_clean.groupby('Category').agg({'Installs': pd.Series.sum})
category_installs.sort_values('Installs', ascending=True, inplace=True)

h_bar = px.bar(x = category_installs.Installs,
               y = category_installs.index,
               orientation='h',
               title='Category Popularity')
 
h_bar.show()

"""### Category Concentration - Downloads vs. Competition

"""

cat_number = df_apps_clean.groupby('Category').agg({'App': pd.Series.count})

cat_merged_df = pd.merge(cat_number, category_installs, on='Category', how="inner")
print(f'The dimensions of the DataFrame are: {cat_merged_df.shape}')

cat_merged_df.sort_values('Installs', ascending=False)

scatter = px.scatter(cat_merged_df, # data
                    x='App', # column name
                    y='Installs',
                    title='Category Concentration',
                    size='App',
                    hover_name=cat_merged_df.index,
                    color='Installs')

scatter.update_layout(xaxis_title="Number of Apps (Lower=More Concentrated)",
                      yaxis_title="Installs",
                      yaxis=dict(type='log'))
 
scatter.show()

"""# Extracting Nested Data from a Column

 How many different types of genres are there? Can an app belong to more than one genre
"""

len(df_apps_clean.Genres.unique())

df_apps_clean.Genres.value_counts().sort_values(ascending=True)[:5]

stack = df_apps_clean.Genres.str.split(';', expand=True).stack()

print(f'We now have a single column with shape: {stack.shape}')

num_genres = stack.value_counts()
print(f'Number of genres: {len(num_genres)}')

"""# Colour Scales in Plotly Charts - Competition in Genres"""

bar = px.bar(
    x = num_genres.index[:15],
    y = num_genres.values[:15],
    title = "Top Genres",
    hover_name = num_genres.index[:15],
    color = num_genres.values[:15],
    color_continuous_scale = "Purpor"
)

bar.update_layout(xaxis_title='Genre',
yaxis_title='Number of Apps',
coloraxis_showscale=False)
 
bar.show()

"""# Grouped Bar Charts: Free vs. Paid Apps per Category"""

df_apps_clean.Type.value_counts()

df_free_vs_paid = df_apps_clean.groupby(["Category", "Type"], as_index=False).agg({'App': pd.Series.count})
df_free_vs_paid.sort_values('Type')

g_bar = px.bar(df_free_vs_paid,
               x = 'Category',
               y = 'App',
               title = 'Free vs Paid Apps by Category',
               color = 'Type',
               barmode = 'group'
    
)

g_bar.update_layout(xaxis_title='Category',
                    yaxis_title='Number of Apps',
                    xaxis={'categoryorder':'total descending'},
                    yaxis=dict(type='log'))
 
g_bar.show()

"""# Plotly Box Plots: Lost Downloads for Paid Apps



"""

box = px.box(df_apps_clean,
             y='Installs',
             x='Type',
             color='Type',
             notched=True,
             points='all',
             title='How Many Downloads are Paid Apps Giving Up?')
 
box.update_layout(yaxis=dict(type='log'))
 
box.show()

"""# Plotly Box Plots: Revenue by App Category

"""

df_paid_apps = df_apps_clean[df_apps_clean['Type'] == 'Paid']
box = px.box(df_paid_apps, 
             x='Category', 
             y='Revenue_Estimate',
             title='How Much Can Paid Apps Earn?')
 
box.update_layout(xaxis_title='Category',
                  yaxis_title='Paid App Ballpark Revenue',
                  xaxis={'categoryorder':'min ascending'},
                  yaxis=dict(type='log'))
 
 
box.show()

"""# How Much Can You Charge? Examine Paid App Pricing Strategies by Category

"""

df_paid_apps.Price.median()

box = px.box(df_paid_apps,
             x='Category',
             y="Price",
             title='Price per Category')
 
box.update_layout(xaxis_title='Category',
                  yaxis_title='Paid App Price',
                  xaxis={'categoryorder':'max descending'},
                  yaxis=dict(type='log'))
 
box.show()